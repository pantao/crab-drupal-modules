<?php

/**
 * @file
 * Contains core functions for the File (Field) Paths module.
 */

use Drupal\Component\Utility\Unicode;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Language\Language;
use Drupal\Core\Url;
use Drupal\field\Entity\FieldConfig;
use Drupal\file\Plugin\Field\FieldType\FileFieldItemList;
use Symfony\Component\HttpFoundation\Response;

// @TODO - Turn this into a plugin.
require_once __DIR__ . '/crab_file_field_path.inc';

/**
 * Implements hook_entity_base_field_info().
 */
function crab_file_field_path_entity_base_field_info(\Drupal\Core\Entity\EntityTypeInterface $entity_type) {
  $fields = [];
  if ($entity_type->id() == 'file') {
    $fields['origname'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Original filename'))
      ->setDescription(t('Original name of the file with no path components.'));
  }

  return $fields;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function crab_file_field_path_form_field_config_edit_form_alter(array &$form, FormStateInterface $form_state) {
  /** @var Drupal\field\Entity\FieldConfig $field */
  $field = $form_state->getFormObject()->getEntity();

  if ($field->getClass() == '\Drupal\file\Plugin\Field\FieldType\FileFieldItemList') {
    $entity_info = \Drupal::entityTypeManager()
      ->getDefinition($field->getTargetEntityTypeId());
    $settings = $field->getThirdPartySettings('crab_file_field_path');

    $form['settings']['crab_file_field_path'] = [
      '#type'    => 'container',
      '#tree'    => TRUE,
      '#weight'  => 2,
      '#parents' => ['third_party_settings', 'crab_file_field_path'],
    ];

    $form['settings']['crab_file_field_path']['enabled'] = [
      '#type'          => 'checkbox',
      '#title'         => t('Enable File (Field) Paths?'),
      '#default_value' => isset($settings['enabled']) ? $settings['enabled'] : TRUE,
      '#description'   => t('File (Field) Paths provides advanced file path and naming options.'),
    ];

    // Hide standard File directory field.
    $form['settings']['file_directory']['#states'] = [
      'visible' => [
        ':input[name="third_party_settings[crab_file_field_path][enabled]"]' => ['checked' => FALSE],
      ],
    ];

    // File (Field) Paths details element.
    $form['settings']['crab_file_field_path']['details'] = [
      '#type'    => 'details',
      '#title'   => t('File (Field) Path settings'),
      '#weight'  => 3,
      '#tree'    => TRUE,
      '#states'  => [
        'visible' => [
          ':input[name="third_party_settings[crab_file_field_path][enabled]"]' => ['checked' => TRUE],
        ],
      ],
      '#parents' => ['third_party_settings', 'crab_file_field_path'],
    ];

    // Additional File (Field) Paths widget fields.
    $settings_fields = \Drupal::moduleHandler()
      ->invokeAll('crab_file_field_path_field_settings', [$form]);
    foreach ($settings_fields as $name => $settings_field) {
      // Attach widget fields.
      $form['settings']['crab_file_field_path']['details'][$name] = [
        '#type' => 'container',
      ];

      // Attach widget field form elements.
      if (isset($settings_field['form']) && is_array($settings_field['form'])) {
        foreach (array_keys($settings_field['form']) as $delta => $key) {
          $form['settings']['crab_file_field_path']['details'][$name][$key] = $settings_field['form'][$key];
          if (\Drupal::moduleHandler()->moduleExists('token')) {
            // @TODO - Token reporting Drupal default tokens are invalid.
            //$form['settings']['crab_file_field_path']['details'][$name][$key]['#element_validate'][] = 'token_element_validate';
            //$form['settings']['crab_file_field_path']['details'][$name][$key]['#token_types'] = array(
            //  'file',
            //  $entity_info->get('token type'),
            //);
          }

          // Fetch stored value from instance.
          if (isset($settings[$name][$key])) {
            $form['settings']['crab_file_field_path']['details'][$name][$key]['#default_value'] = $settings[$name][$key];
          }
        }

        // Field options.
        $form['settings']['crab_file_field_path']['details'][$name]['options'] = [
          '#type'       => 'details',
          '#title'      => t('@title options', ['@title' => $settings_field['title']]),
          '#weight'     => 1,
          '#attributes' => [
            'class' => ["{$name} cleanup"],
          ],
        ];
        // Cleanup slashes (/).
        $form['settings']['crab_file_field_path']['details'][$name]['options']['slashes'] = [
          '#type'          => 'checkbox',
          '#title'         => t('Remove slashes (/) from tokens'),
          '#default_value' => isset($settings[$name]['options']['slashes']) ? $settings[$name]['options']['slashes'] : FALSE,
          '#description'   => t('If checked, any slashes (/) in tokens will be removed from %title.', ['%title' => $settings_field['title']]),
        ];

        // Cleanup field with Pathauto module.
        $form['settings']['crab_file_field_path']['details'][$name]['options']['pathauto'] = [
          '#type'          => 'checkbox',
          '#title'         => t('Cleanup using Pathauto'),
          '#default_value' => isset($settings[$name]['options']['pathauto']) && \Drupal::moduleHandler()
            ->moduleExists('pathauto') ? $settings[$name]['options']['pathauto'] : FALSE,
          '#description'   => t('Cleanup %title using Pathauto.', [
            '%title' => $settings_field['title'],
          ]),
          '#disabled'      => TRUE,
        ];
        if (\Drupal::moduleHandler()->moduleExists('pathauto')) {
          unset($form['settings']['crab_file_field_path']['details'][$name]['options']['pathauto']['#disabled']);
          $form['settings']['crab_file_field_path']['details'][$name]['options']['pathauto']['#description'] = t('Cleanup %title using <a href="@pathauto">Pathauto settings</a>.', [
            '%title'    => $settings_field['title'],
            '@pathauto' => Url::fromRoute('pathauto.settings.form')->toString(),
          ]);
        }

        // Transliterate field.
        $form['settings']['crab_file_field_path']['details'][$name]['options']['transliterate'] = [
          '#type'          => 'checkbox',
          '#title'         => t('Transliterate'),
          '#default_value' => isset($settings[$name]['options']['transliterate']) ? $settings[$name]['options']['transliterate'] : 0,
          '#description'   => t('Provides one-way string transliteration (romanization) and cleans the %title during upload by replacing unwanted characters.', ['%title' => $settings_field['title']]),
        ];

        // Replacement patterns for field.
        if (\Drupal::moduleHandler()->moduleExists('token')) {
          $form['settings']['crab_file_field_path']['details']['token_tree'] = [
            '#theme'       => 'token_tree',
            '#token_types' => ['file', $entity_info->get('token type')],
            '#dialog'      => TRUE,
            '#weight'      => 10,
          ];
        }

        // Redirect.
        $form['settings']['crab_file_field_path']['details']['redirect'] = [
          '#type'          => 'checkbox',
          '#title'         => t('Create Redirect'),
          '#description'   => t('Create a redirect to the new location when a previously uploaded file is moved.'),
          '#default_value' => isset($settings['redirect']) ? $settings['redirect'] : FALSE,
          '#weight'        => 11,
        ];
        if (!\Drupal::moduleHandler()->moduleExists('redirect')) {
          $form['settings']['crab_file_field_path']['details']['redirect']['#disabled'] = TRUE;
          $form['settings']['crab_file_field_path']['details']['redirect']['#description'] .= '<br />' . t('Requires the <a href="https://drupal.org/project/redirect" target="_blank">Redirect</a> module.');
        }

        // Retroactive updates.
        $form['settings']['crab_file_field_path']['details']['retroactive_update'] = [
          '#type'        => 'checkbox',
          '#title'       => t('Retroactive update'),
          '#description' => t('Move and rename previously uploaded files.') . '<div>' . t('<strong class="warning">Warning:</strong> This feature should only be used on developmental servers or with extreme caution.') . '</div>',
          '#weight'      => 12,
        ];

        // Active updating.
        $form['settings']['crab_file_field_path']['details']['active_updating'] = [
          '#type'          => 'checkbox',
          '#title'         => t('Active updating'),
          '#default_value' => isset($settings['active_updating']) ? $settings['active_updating'] : FALSE,
          '#description'   => t('Actively move and rename previously uploaded files as required.') . '<div>' . t('<strong class="warning">Warning:</strong> This feature should only be used on developmental servers or with extreme caution.') . '</div>',
          '#weight'        => 13,
        ];
      }
    }

    $form['actions']['submit']['#submit'][] = 'crab_file_field_path_form_submit';
  }
}

/**
 * Implements hook_form_alter().
 */
function crab_file_field_path_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  // Force all File (Field) Paths uploads to go to the temporary file system
  // prior to being processed.
  if (isset($element['#type']) && $element['#type'] == 'managed_file' && isset($context['items'])) {
    $field = $context['items'];
    if (_crab_file_field_path_is_enabled($field)) {
      if (isset($settings['enabled']) && $settings['enabled']) {
        $element['#upload_location'] = \Drupal::config('crab_file_field_path.settings')
          ->get('temp_location');
      }
    }
  }
}

/**
 * Submit callback for File (Field) Paths settings form.
 *
 * @param array $form
 *   TODO.
 * @param FormStateInterface $form_state
 *   TODO.
 */
function crab_file_field_path_form_submit($form, FormStateInterface $form_state) {
  $settings = $form_state->getValue('third_party_settings')['crab_file_field_path'];
  // Retroactive updates.
  if ($settings['enabled'] && $settings['retroactive_update']) {
    if (crab_file_field_path_batch_update($form_state->getFormObject()
      ->getEntity())) {
      $response = batch_process($form_state->getRedirect());
      if ($response instanceof Response) {
        $response->send();
      }
    }
  }
}

/**
 * Set batch process to update File (Field) Paths.
 *
 * @param FieldConfig $field_config
 *   TODO.
 *
 * @return bool
 *   TODO.
 */
function crab_file_field_path_batch_update(FieldConfig $field_config) {
  $entity_info = \Drupal::entityTypeManager()
    ->getDefinition($field_config->getTargetEntityTypeId());
  $query = \Drupal::entityQuery($field_config->getTargetEntityTypeId());
  $result = $query->condition($entity_info->getKey('bundle'), $field_config->getTargetBundle())
    ->condition("{$field_config->getName()}.target_id", '', '<>')
    ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT')
    ->execute();

  // If there are no results, do not set a batch as there is nothing to process.
  if (empty($result)) {
    return FALSE;
  }

  // Create batch.
  $batch = [
    'title'      => t('Updating File (Field) Paths'),
    'operations' => [
      [
        '_crab_file_field_path_batch_update_process',
        [$result, $field_config],
      ],
    ],
  ];
  batch_set($batch);

  return TRUE;
}

/**
 * Batch callback for File (Field) Paths retroactive updates.
 *
 * @param array $objects
 *   TODO.
 * @param FieldConfig $field_config
 *   TODO.
 * @param array $context
 *   TODO.
 */
function _crab_file_field_path_batch_update_process($objects, FieldConfig $field_config, &$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = count($objects);
    $context['sandbox']['objects'] = $objects;
  }
  /** @var Drupal\Core\Entity\ContentEntityStorageBase $entity_storage */
  $entity_storage = \Drupal::entityTypeManager()
    ->getStorage($field_config->getTargetEntityTypeId());

  // Process nodes by groups of 5.
  $count = min(5, count($context['sandbox']['objects']));
  for ($i = 1; $i <= $count; $i++) {
    // For each oid, load the object, update the files and save it.
    $oid = array_shift($context['sandbox']['objects']);
    $entity = $entity_storage->load($oid);

    // Enable active updating if it isn't already enabled.
    $active_updating = $field_config->getThirdPartySetting('crab_file_field_path', 'active_updating');
    if (!$active_updating) {
      $field_config->setThirdPartySetting('crab_file_field_path', 'active_updating', TRUE);
      $field_config->save();
    }

    $entity->original = $entity;
    crab_file_field_path_entity_update($entity);

    // Restore active updating to it's previous state if necessary.
    if (!$active_updating) {
      $field_config->setThirdPartySetting('crab_file_field_path', 'active_updating', $active_updating);
      $field_config->save();
    }

    // Update our progress information.
    $context['sandbox']['progress']++;
  }

  // Inform the batch engine that we are not finished,
  // and provide an estimation of the completion level we reached.
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * Get crab_file_field_path field settings.
 *
 * @param \Drupal\Core\Field\FieldItemListInterface $field
 *   A field item to check for settings.
 *
 * @return array
 *   The crab_file_field_path settings for the field if set, else empty.
 */
function _crab_file_field_path_get_field_settings(FieldItemListInterface $field) {
  $settings = [];
  $definition = $field->getFieldDefinition();
  if ($definition instanceof ThirdPartySettingsInterface) {
    $settings = $definition->getThirdPartySettings('crab_file_field_path');
  }

  return $settings;
}

/**
 * Check if crab_file_field_path is enabled fo a field.
 *
 * @param \Drupal\Core\Field\FieldItemListInterface|mixed $field
 *   A field to check.
 *
 * @return bool
 */
function _crab_file_field_path_is_enabled($field) {
  $settings = [];
  if ($field instanceof FieldItemListInterface) {
    $settings = _crab_file_field_path_get_field_settings($field);
  }

  return isset($settings['enabled']) ? (bool) $settings['enabled'] : FALSE;
}

/**
 * Implements hook_entity_insert().
 */
function crab_file_field_path_entity_insert(EntityInterface $entity) {
  crab_file_field_path_entity_update($entity);
}

/**
 * Implements hook_entity_update().
 */
function crab_file_field_path_entity_update(EntityInterface $entity) {
  \Drupal::logger('Crab File Field Path')->debug('$entity instanceof ContentEntityInterface: ' . ($entity instanceof ContentEntityInterface));
  if ($entity instanceof ContentEntityInterface) {
    foreach ($entity->getFields() as $field) {
      \Drupal::logger('Crab File Field Path')->debug('$field data: ' . (json_encode($field->toArray())));
      if ($field instanceof FileFieldItemList && _crab_file_field_path_is_enabled($field)) {
        $settings = _crab_file_field_path_get_field_settings($field);
        \Drupal::moduleHandler()
          ->invokeAll('crab_file_field_path_process_file', [
            $entity,
            $field,
            $settings,
          ]);
      }
    }
  }
}

/**
 * Implements hook_file_presave().
 */
function crab_file_field_path_file_presave($file) {
  // Store original filename in the database.
  if ($file->origname->isEmpty() && !$file->filename->isEmpty()) {
    $file->origname = $file->filename;
  }
}

/**
 * Creates a redirect for a moved File field.
 *
 * @param string $source
 *   The source file URL.
 * @param string $path
 *   The moved file URL.
 * @param Language $language
 *   The language of the source file.
 */
function _crab_file_field_path_create_redirect($source, $path, Language $language) {
  \Drupal::logger('crab_file_field_path')
    ->debug(t('Creating redirect from @source to @path', [
      '@source' => $source,
      '@path'   => $path,
    ]));

  /** @var \Drupal\redirect\Entity\Redirect $redirect */
  $redirect = \Drupal::entityTypeManager()->getStorage('redirect')->create([]);

  $parsed_source = parse_url(file_create_url($source), PHP_URL_PATH);
  $parsed_path = parse_url(file_create_url($path), PHP_URL_PATH);

  $redirect->setSource($parsed_source);
  $redirect->setRedirect($parsed_path);

  // Check if the redirect exists before saving.
  $hash = $redirect->generateHash($parsed_path, [], $language->getId());
  $redirects = \Drupal::entityTypeManager()
    ->getStorage('redirect')
    ->loadByProperties(['hash' => $hash]);
  if (empty($redirects)) {
    $redirect->save();
  }
}

/**
 * Process and cleanup strings.
 *
 * @param string $value
 *   Todo.
 * @param string $data
 *   Todo.
 * @param array $settings
 *   Todo.
 *
 * @return string
 *   Todo.
 */
function crab_file_field_path_process_string($value, $data, array $settings = []) {
  $transliterate = $settings['transliterate'];
  $pathauto = \Drupal::moduleHandler()
      ->moduleExists('pathauto') && isset($settings['pathauto']) && $settings['pathauto'] == TRUE;
  $remove_slashes = !empty($settings['slashes']);

  // If '/' is to be removed from tokens, token replacement need to happen after
  // splitting the paths to subdirs, otherwise tokens containing '/' will be
  // part of the final path.
  if (!$remove_slashes) {
    $value = \Drupal::service('token')
      ->replace($value, $data, ['clear' => TRUE]);
  }
  $paths = explode('/', $value);

  foreach ($paths as $i => &$path) {
    if ($remove_slashes) {
      $path = \Drupal::service('token')
        ->replace($path, $data, ['clear' => TRUE]);
    }
    if ($pathauto == TRUE) {
      if ('file_name' == $settings['context'] && count($paths) == $i + 1) {
        $pathinfo = pathinfo($path);
        $basename = \Drupal::service('file_system')->basename($path);
        $extension = preg_match('/\.[^.]+$/', $basename, $matches) ? $matches[0] : NULL;
        $pathinfo['filename'] = !is_null($extension) ? Unicode::substr($basename, 0, Unicode::strlen($basename) - Unicode::strlen($extension)) : $basename;

        if ($remove_slashes) {
          $path = '';
          if (!empty($pathinfo['dirname']) && $pathinfo['dirname'] !== '.') {
            $path .= $pathinfo['dirname'] . '/';
          }
          $path .= $pathinfo['filename'];
          $path = \Drupal::service('pathauto.alias_cleaner')
            ->cleanstring($path);
          if (!empty($pathinfo['extension'])) {
            $path .= '.' . \Drupal::service('pathauto.alias_cleaner')
                ->cleanstring($pathinfo['extension']);
          }
          $path = str_replace('/', '', $path);
        }
        else {
          $path = str_replace($pathinfo['filename'], \Drupal::service('pathauto.alias_cleaner')
            ->cleanstring($pathinfo['filename']), $path);
        }
      }
      else {
        $path = \Drupal::service('pathauto.alias_cleaner')->cleanstring($path);
      }
    }
    elseif ($remove_slashes) {
      $path = str_replace('/', '', $path);
    }

    // Transliterate string.
    if ($transliterate == TRUE) {
      $path = \Drupal::service('transliteration')->transliterate($path);
    }
  }
  $value = implode('/', $paths);

  // Ensure that there are no double-slash sequences due to empty token values.
  $value = preg_replace('/\/+/', '/', $value);

  return $value;
}
